Ben Brownstein HW#6
Doodle
Sourcecode:
import java.awt.Color;
import java.awt.Graphics2D;
public class doodle {
	public static void main(String args[]) 
	{
		DrawingPanel myDPanel = new DrawingPanel (200, 200);
		Graphics2D g = myDPanel.getGraphics();
		Color myColor = new Color(0, 0, 0);
		g.setColor(myColor);
		drawPentagon(g, 100,100,100);
		drawTriangle(g, 30,50,30);
		g.setColor(Color.RED);
		g.fillOval(70, 140, 20, 30);

	}
	public static void drawPentagon(Graphics2D g, int x, int y, int width) 
	{
		g.drawLine(x, y, x + width/2, y + width/3);
		g.drawLine(x - width/2, y + width/3, x, y);
		g.drawLine(x + width/2, y + width/3, x + width/3, y + width*4/5);
		g.drawLine(x - width/2, y + width/3, x - width/3, y + width*4/5);
		g.drawLine(x - width/3, y + width*4/5, x + width/3, y + width*4/5);
	}
	public static void drawTriangle(Graphics2D g, int x, int y, int width) 
	{
		g.drawLine(x, y, x + width/2, y+ width/3);
		g.drawLine(x + width/2, y + width/3, x - width/2, y + width/3);
		g.drawLine(x - width/2, y + width/3, x, y);
	}
}

Output:
In file BBrownstein_Doodle

CafeWall
Sourcecode:
import java.awt.Color;
import java.awt.Graphics2D;

public class cafeWall {
	public static void main(String[] args) {
		DrawingPanel myDPanel = new DrawingPanel (650, 400);
		Graphics2D g = myDPanel.getGraphics();
		background(g);
		row(g,0,0,4,20);
		row(g,50,70,5,30);
		grid(g,10,150,4,25,0);
		grid(g,250,200,3,25,10);
		grid(g, 425,180,5,20,10);
		grid(g,400,20,2,35,35);
		
	}
	public static void background(Graphics2D g) 
	{
		g.setColor(Color.GRAY);
		g.fillRect(0, 0, 650, 400);
	}
	public static void row(Graphics2D g, int x, int y, int pairs, int size) 
	{
		for (int i = 1; i <= pairs; i++) 
		{
			g.setColor(Color.BLACK);
			g.fillRect(x, y, size, size);
			g.setColor(Color.BLUE);
			g.drawLine(x, y, x + size, y + size);
			g.drawLine(x + size, y, x, y + size);
			x = x + size;
			g.setColor(Color.WHITE);
			g.fillRect(x, y, size, size);
			x = x + size;
			
		}
	}
	public static void grid(Graphics2D g, int x, int y, int rows, int size, int offset) 
	{

		for (int i = 1; i <= rows; i++) 
		{
			row(g,x,y,rows,size);
			y= y + size +2;
			x = x + offset;
			row(g,x,y,rows,size);
			x = x - offset;
			y = y + size +2;
		}
	}

}

Output:
In file BBrownstein_CafeWall