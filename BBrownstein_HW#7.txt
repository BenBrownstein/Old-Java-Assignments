Ben Brownstein HW#7
Exercise 1:
Sourcecode
public class lastIndexOf {
	public static void main(String[] args) 
	{
		int array[] = {74,85,102,99,101,85,56};
		System.out.println(lastIndexOf(array,85));
		int array2[] = {74,85,102,99,101,85,56};
		System.out.println(lastIndexOf(array2,74));
		int array3[] = {74,85,102,99,101,85,56};
		System.out.println(lastIndexOf(array3,56));
	}
	public static int lastIndexOf (int array[], int lastval) 
	{
		int temp = -1;
		for(int i = 0; i <= array.length -1; i++) 
		{
			if (array[i] == lastval) 
			{
				temp = i;
			}
			
		}
		return temp;
	}
}

Output:
5
0
6
Exercise 2:
Sourcecode:
public class arrayRange {
	public static void main(String[] args) 
	{
		int list[] = {36,12,25,19,46,31,22};
		System.out.println(range(list));
	}
	public static int range(int list[]) 
	{
		int max = 0;
		int min = 999999;
		for(int i = 0; i <= list.length -1; i++) 
		{
			if (list[i] <= min) 
			{
				min = list[i];
			}
			if (list[i] >= max) 
			{
				max = list[i];
			}
		}
		int range = max - min + 1;
		return range;
	}
}
Output:
35

Exercise 3:
Sourcecode:
public class countInRange {
	public static void main(String[] args) 
	{
		int array[] = {14,1,22,17,36,7,-43,5};
		System.out.println(countInRange(array,4,17));
	}
	public static int countInRange (int array[], int min, int max) 
	{
		int count = 0;
		for(int i = 0; i <= array.length -1; i++) 
		{
			if (array[i] >= min) 
			{
				if (array[i] <= max) 
				{
					count++;
				}
			}
			
		}
		return count;
	}
}

Output:
4

Exercise 4:
Sourcecode:
public class arraySorted {
	public static void main(String[] args) 
	{
		double list1[] = {16.1,12.3,22.2,14.4};
		double list2[] = {1.5,4.3,7.0,19.5,25.1,46.2};
		System.out.println(isSorted(list1));
		System.out.println(isSorted(list2));

	}
	public static boolean isSorted(double a1[]) 
	{
		for (int i = 0; i <= a1.length -2; i++) 
		{
			if (a1[i] >= a1[i+1]) 
			{
				return false;
			}
		}
		return true;
	}
}

Output:
false
true

Exercise 7:
Sourcecode:
import java.util.Arrays;

public class KthLargest {

	public static void main(String[] args) 
	{
		int a[] = {74,85,102,99,101,56,84};
		System.out.println(kthLargest(a,2));
		System.out.println(kthLargest(a,0));
	}
	public static int kthLargest (int a[], int k) 
	{
		int kth = 0;
		int temp = 0;
		Arrays.sort(a);
		for (int i =0; i <= a.length -1; i++) 
		{
			if(i == k)
			{
				temp = a.length - i -1;
				kth = a[temp];
			}
		}
		return kth;
	}
}
Output:
99
102

Exercise 8: 
Sourcecode:
import java.util.Arrays;

public class MedianArray {

	public static void main(String[] args) {
		int a1[] = {5,2,4,17,55,4,3,26,18,2,17};
		System.out.println(median(a1));
		int a2[] = {42,37,1,97,1,2,7,42,3,25,89,15,10,29,27};
		System.out.println(median(a2));
	}
	
	public static int median (int a[]) 
	{
		Arrays.sort(a);
		int length = (a.length / 2);
		return a[length];
	}
}

Output:
5
25

Exercise 9:
Sourcecode:
public class minGap {
	public static void main(String[] args) {
		int a[] = {1,3,6,7,12};
		System.out.println(minGap(a));
	}
	public static int minGap (int a[]) 
	{
		if (a.length + 1 <= 2) 
		{
			return 0;
		}
		int minGap = 999; 
		int gap = 0;
		for (int i = 0; i <= a.length -2; i++) 
		{
			gap = a[i+1] - a[i];
			if (minGap > gap) 
			{
				minGap = gap;
			}
		}
		return minGap;
	}
}

Output:
1

Exercise 11:
Sourcecode:
import java.util.Arrays;

public class isUnique {
	public static void main(String[] args) {
		int a1[] = {3,8,12,2,9,17,43,-8,46};
		System.out.println(isUnique(a1));
		int a2[] = {4,7,3,9,12,-47,3,74};
		System.out.println(isUnique(a2));

	}
	public static boolean isUnique (int a[])
	{
		Arrays.sort(a);
		for (int i = 0; i <= a.length -2; i++) 
		{
			if (a[i] == a[i + 1]) return false;
		}
		return true;
	}
}

Output:
true
false

Exercise 12:
Sourcecode:
public class priceIsRight {
	public static void main(String[] args) {
		int bids[] = {200,300,250,1,950,40};
		System.out.println(priceIsRight(bids,280));
	}
	public static int priceIsRight (int bids[], int correct) 
	{
		int answer = 0;
		for (int i = 0; i <= bids.length -1; i++)
		{
			if (bids[i] <= correct) 
			{
				if (bids[i] >= answer) 
				{
					answer = bids[i];
				}
			}
		}
		return answer;
	}
}

Output:
250